package net.c7j.wna.huawei

import android.app.Activity
import android.content.IntentSender.SendIntentException
import android.text.TextUtils
import com.huawei.hmf.tasks.Task
import com.huawei.hms.iap.Iap
import com.huawei.hms.iap.IapApiException
import com.huawei.hms.iap.IapClient
import com.huawei.hms.iap.entity.*
import com.huawei.hms.support.api.client.Status

// IAP Kit interface operating class. All the IAP Kit operating methods are called from here.
// API Reference: https://developer.huawei.com/consumer/en/doc/development/HMSCore-References/iapclient-0000001050137587
object IapRequestHelper {

    var ownedPurchasesResult: OwnedPurchasesResult? = null

    private fun createPurchaseIntentReq(type: Int, productId: String): PurchaseIntentReq {
        val req = PurchaseIntentReq()
        req.priceType = type // 0: consumable 1: non-consumable 2 auto-renewable subscription
        req.productId = productId  // product ID you set during in-app product configuration in AppGallery Connect
        // How to use developerPayload ("Key parameters" article): https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/key-parameters-0000001354668057
        req.developerPayload = "whatever" // If a value exists, it will be returned in the callback result to the app after successful payment
        return req
    }

    private fun createConsumeOwnedPurchaseReq(purchaseToken: String): ConsumeOwnedPurchaseReq {
        val req = ConsumeOwnedPurchaseReq()
        // This token is used to update the order status and then deliver the in-app product.
        // Is generated by the Huawei payment server during product payment, get it from InAppPurchaseData
        req.purchaseToken = purchaseToken
        req.developerChallenge = "optional value" //
        return req
    }

    private fun createOwnedPurchasesReq(type: Int, continuationToken: String?): OwnedPurchasesReq {
        val req = OwnedPurchasesReq()
        req.priceType = type // 0: consumable 1: non-consumable 2 auto-renewable subscription
        // A data location flag which returns from obtainOwnedPurchases api or obtainOwnedPurchaseRecord api
        req.continuationToken = continuationToken
        return req
    }

    // Creates request is required to obtain in-app product details configured in AppGallery Connect
    private fun createProductInfoReq(type: Int, productIds: List<String>): ProductInfoReq {
        val req = ProductInfoReq()
        req.priceType = type // 0: consumable 1: non-consumable 2 auto-renewable subscription
        req.productIds = productIds // Ids of products to be queried. Each product ID must exist and be unique in the current app.
        return req
    }

    // Obtain in-app product details configured in AppGallery Connect
    @JvmStatic
    fun obtainProductInfo(
        iapClient: IapClient?,      // IapClient instance to call the obtainProductInfo API
        productIds: List<String>,   // List of products to be queried. Each product ID must exist and be unique
        type: Int,                  // 0: consumable 1: non-consumable 2 auto-renewable subscription
        callback: IapApiCallback<ProductInfoResult?>)
    {
        log("call obtainProductInfo")
        val task = iapClient?.obtainProductInfo(createProductInfoReq(type, productIds))
        task?.addOnSuccessListener {
                result -> callback.onSuccess(result).also { log("obtainProductInfo, success") }
        }?.addOnFailureListener {
                e -> callback.onFail(e).also { log("obtainProductInfo, fail") }
        }
    }

    // Redirects user to make purchase page. A good chosen to buy is passed as productId parameter.
    fun createPurchaseIntent(
        activity: Activity?,
        productId: String,          // This Id is set during in-app product configuration in AppGallery Connect
        type: Int,                  // 0: consumable 1: non-consumable 2 auto-renewable subscription
        callback: IapApiCallback<PurchaseIntentResult?>)
    {
        log("call createPurchaseIntent")
        val mClient: IapClient = Iap.getIapClient(activity)
        val task: Task<PurchaseIntentResult> =
            mClient.createPurchaseIntent(createPurchaseIntentReq(type, productId))
        task
            .addOnSuccessListener { result: PurchaseIntentResult ->
                if (result.status.hasResolution()) {
                    try {
                        result.status.startResolutionForResult(activity, IapExceptionHandler.REQ_CODE_BUY)
                    } catch (exp: SendIntentException) { log("Error: " + exp.message) }
                }
                callback.onSuccess(result)
            }
            .addOnFailureListener { e: Exception -> callback.onFail(e) }
    }

    // Redirects user to sign in page. Before making a purchase user have to be signed in.
    @JvmStatic
    fun startResolutionForResult(
        activity: Activity?,    // the activity to launch a new page
        status: Status?,        // status parameter contains the pendingIntent object of the payment page
        reqCode: Int)
    {
        status?.let {
            if (status.hasResolution()) {
                try {
                    status.startResolutionForResult(activity, reqCode)
                } catch (exp: SendIntentException) { log(exp.message.toString()) }
            } else log("intent is null")
        } ?: log("status is null")
    }

    // Gets the historical consumption information about a consumable in-app product or all subscription receipts of a subscription
    fun obtainOwnedPurchaseRecord(
        iapClient: IapClient,       // IapClient instance to call the obtainOwnedPurchaseRecord API
        priceType: Int,             // 0: consumable 1: non-consumable 2 auto-renewable subscription
        continuationToken: String?, // data locating flag for supporting query in pagination mode
        callback: IapApiCallback<OwnedPurchasesResult?>
    ) {
        log("call obtainOwnedPurchaseRecord")
        val task = iapClient.obtainOwnedPurchaseRecord(createOwnedPurchasesReq(priceType, continuationToken))
        task.addOnSuccessListener { result ->
            callback.onSuccess(result).also { log("obtainOwnedPurchaseRecord, success") }
        }.addOnFailureListener { e ->
            callback.onFail(e).also { log("obtainOwnedPurchaseRecord, fail") }
        }
    }

    // Consume all the unconsumed purchases with priceType 0 (consumable)
    fun consumeOwnedPurchase(
        iapClient: IapClient?,  // IapClient instance to call the consumeOwnedPurchase API
        purchaseToken: String)  // is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData
    {
        val task = iapClient?.consumeOwnedPurchase(createConsumeOwnedPurchaseReq(purchaseToken))
        task?.addOnSuccessListener { log("consumeOwnedPurchase success") }
            ?.addOnFailureListener { e ->
                if (e is IapApiException) {
                    log("IapApiException returnCode: ${e.statusCode}")
                } else log("Exception: ${e.message}")
            }
    }

    // Redirects user to subscription management page (productId = subscription id)
    fun showSubscription(activity: Activity?, productId: String?) {
        val req = StartIapActivityReq()
        if (TextUtils.isEmpty(productId)) {
            req.type = StartIapActivityReq.TYPE_SUBSCRIBE_MANAGER_ACTIVITY
        } else {
            req.type = StartIapActivityReq.TYPE_SUBSCRIBE_EDIT_ACTIVITY
            req.subscribeProductId = productId
        }
        val iapClient: IapClient = Iap.getIapClient(activity)
        val task: Task<StartIapActivityResult> = iapClient.startIapActivity(req)
        task.addOnSuccessListener { result: StartIapActivityResult? -> result?.startActivity(activity) }
            .addOnFailureListener { e: Exception? -> IapExceptionHandler.handle(activity, e, false) }
    }

    /**
     * If true: confirms country/region where HUAWEI ID is signed-in is located supports HUAWEI IAP, otherwise:
     * @see IapExceptionHandler.handle */
    fun isEnvironmentReady(activity: Activity?, huaweiIAPResultCallback: IapResultCallback) {
        val mClient: IapClient = Iap.getIapClient(activity)
        val task = mClient.isEnvReady
        task.addOnSuccessListener {
            huaweiIAPResultCallback.onEnvironmentReady()
        }.addOnFailureListener { e ->
            log("isEnvReady fail: ${e.message}")
            IapExceptionHandler.handle(activity, e, true)
        }
    }

    /*
     * Queries purchase data of the products that a user has bought.
     * For consumables, this method returns purchase data of those already bought but not consumed.
     * For non-consumables, this method returns purchase data of all the products that have been bought.
     * For subscriptions, this method returns only the currently active subscription relationships.
     **/
    fun obtainOwnedPurchases(activity: Activity?, iapResultCallback: IapResultCallback, type: Int) {
        log("call obtainOwnedPurchases")
        val mClient: IapClient = Iap.getIapClient(activity)
        val task = mClient.obtainOwnedPurchases(createOwnedPurchasesReq(type, null))
        task
            ?.addOnSuccessListener { result ->
                iapResultCallback.onIapDataReceived(result).also { log("obtainOwnedPurchases, success") } }
            ?.addOnFailureListener { e ->
                iapResultCallback.onIapDataFailed(e).also { log("obtainOwnedPurchases, fail") } }
    }

    // if you ran out of subscriptions to test on, sign in with a different huawei account on your device
    // Important: Developer account DOESN'T HAVE A REFUND BUTTON (except Mainland China).
    // If you want to make a refund - submit an email to HUAWEI technical support.
    const val TEST_CON1 = "test_consume1"
    const val TEST_CON2 = "test_consume2"
    const val TEST_CON3 = "test_consume3"
    const val TEST_CON4 = "test_consume4"

    const val TEST_NON1 = "test_non_consume1"
    const val TEST_NON2 = "test_non_consume2"

    const val TEST_SUB1 = "sub1_test"   // grouped subs - if buy one of them other will also appear in show subs menu
    const val TEST_SUB12 = "sub1_test2" // grouped subs - if buy one of them other will also appear in show subs menu
    const val TEST_SUB2 = "sub2_test"
    const val TEST_SUB3 = "sub3_test"

    const val INACTIVE_SUB = "test_18jan2023" // I have deactivated this subscription in AppGallery console

}
